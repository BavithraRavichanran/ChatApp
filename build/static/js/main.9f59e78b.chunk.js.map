{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["client","W3CWebsocket","App","state","userName","isLogged","messages","onButtonClicked","value","send","JSON","stringify","type","msg","user","setState","searchVal","onopen","console","log","onmessage","message","datafromserver","parse","data","className","this","style","fontSize","display","flexDirection","paddingBottom","map","key","width","margin","alignSelf","avatar","color","backgroundColor","toUpperCase","title","description","placeholder","enterButton","size","onChange","e","target","onSearch","padding","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"4WAYMA,EAAS,IAAIC,eAAa,uBAIXC,E,4MAEnBC,MAAQ,CACNC,SAAU,GACVC,UAAU,EACVC,SAAU,I,EAEZC,gBAAkB,SAACC,GACjBR,EAAOS,KAAKC,KAAKC,UAAU,CACzBC,KAAM,UACNC,IAAKL,EACLM,KAAM,EAAKX,MAAMC,YAEnB,EAAKW,SAAS,CAAEC,UAAW,M,kEAER,IAAD,OAClBhB,EAAOiB,OAAS,WACdC,QAAQC,IAAI,wBAEdnB,EAAOoB,UAAY,SAACC,GAClB,IAAMC,EAAiBZ,KAAKa,MAAMF,EAAQG,MAC1CN,QAAQC,IAAI,YAAaG,GACG,YAAxBA,EAAeV,MACjB,EAAKG,UAAS,SAACZ,GAAD,MAAY,CACxBG,SAAS,GAAD,mBAAMH,EAAMG,UAAZ,CACR,CACEO,IAAKS,EAAeT,IACpBC,KAAMQ,EAAeR,e,+BAMrB,IAAD,OACP,OACE,yBAAKW,UAAU,QACZC,KAAKvB,MAAME,SACV,6BACE,yBAAKoB,UAAU,SACb,kBAAC,IAAD,CAAMb,KAAK,YAAYe,MAAO,CAAEC,SAAU,SAA1C,mBAEF,yBAAKD,MAAO,CAAEE,QAAS,OAAQC,cAAe,SAAUC,cAAe,KACpEL,KAAKvB,MAAMG,SAAS0B,KAAI,SAAAX,GAAO,OAC9B,kBAAC,IAAD,CAAMY,IAAKZ,EAAQR,IAAKc,MAAO,CAC7BO,MAAO,IAAKC,OAAQ,iBAAkBC,UAAW,EAAKjC,MAAMC,WAAaiB,EAAQP,KAC/E,WAAa,eAGf,kBAAC,IAAD,CACEuB,OACE,kBAAC,IAAD,CAAQV,MAAO,CAAEW,MAAO,UAAWC,gBAAiB,uBAAyBlB,EAAQP,KAAK,GAAG0B,eAE/FC,MAAOpB,EAAQP,KACf4B,YAAarB,EAAQR,WAM7B,yBAAKY,UAAU,UACb,kBAAC,IAAD,CACEkB,YAAY,yBACZC,YAAY,OACZpC,MAAOkB,KAAKvB,MAAMa,UAClB6B,KAAK,QACLC,SAAU,SAACC,GAAD,OAAO,EAAKhC,SAAS,CAAEC,UAAW+B,EAAEC,OAAOxC,SACrDyC,SAAU,SAAAzC,GAAK,OAAI,EAAKD,gBAAgBC,QAO9C,yBAAKmB,MAAO,CAAEuB,QAAS,eACrB,kBAAC,IAAD,CACEP,YAAY,iBACZC,YAAY,QACZC,KAAK,QACLI,SAAU,SAAAzC,GAAK,OAAI,EAAKO,SAAS,CAAEV,UAAU,EAAMD,SAAUI,a,GA9E1C2C,aCJbC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLnD,QAAQmD,MAAMA,EAAMhD,a","file":"static/js/main.9f59e78b.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport { w3cwebsocket as W3CWebsocket } from 'websocket';\nimport { Card, Avatar, } from 'antd';\nimport 'antd/dist/antd.css';\nimport Search from 'antd/lib/input/Search';\nimport Text from 'antd/lib/typography/Text';\nimport Meta from 'antd/lib/card/Meta'\nimport './App.css'\n\n// const { Search } = Input;\n// const {Text}= Typography;\nconst client = new W3CWebsocket('ws://127.0.0.1:8000');\n// const client = new W3CWebsocket('/');\n\n\nexport default class App extends Component {\n\n  state = {\n    userName: '',\n    isLogged: false,\n    messages: []\n  }\n  onButtonClicked = (value) => {\n    client.send(JSON.stringify({\n      type: \"message\",\n      msg: value,\n      user: this.state.userName\n    }));\n    this.setState({ searchVal: '' })\n  }\n  componentDidMount() {\n    client.onopen = () => {\n      console.log(\"websocket connected\");\n    };\n    client.onmessage = (message) => {\n      const datafromserver = JSON.parse(message.data);\n      console.log(\"got reply\", datafromserver);\n      if (datafromserver.type === \"message\") {\n        this.setState((state) => ({\n          messages: [...state.messages,\n          {\n            msg: datafromserver.msg,\n            user: datafromserver.user\n          }]\n        }))\n      }\n    }\n  }\n  render() {\n    return (\n      <div className=\"main\">\n        {this.state.isLogged ?\n          <div>\n            <div className=\"title\">\n              <Text type=\"secondary\" style={{ fontSize: '36px' }}>WebSocket Chat</Text>\n            </div>\n            <div style={{ display: 'flex', flexDirection: 'column', paddingBottom: 50 }}>\n              {this.state.messages.map(message =>\n                <Card key={message.msg} style={{\n                  width: 300, margin: '16px 4px 0 4px', alignSelf: this.state.userName === message.user ?\n                    'flex-end' : 'flex-start'\n                }} >\n\n                  <Meta\n                    avatar={\n                      <Avatar style={{ color: \"#f56a00\", backgroundColor: \"rgb(247, 215, 203)\" }}>{message.user[0].toUpperCase()}</Avatar>\n                    }\n                    title={message.user}\n                    description={message.msg}\n                  />\n                </Card>\n              )}\n            </div>\n\n            <div className=\"bottom\">\n              <Search\n                placeholder=\"input message and send\"\n                enterButton=\"Send\"\n                value={this.state.searchVal}\n                size=\"large\"\n                onChange={(e) => this.setState({ searchVal: e.target.value })}\n                onSearch={value => this.onButtonClicked(value)}\n              />\n            </div>\n            {/* <button onClick={() => this.onButtonClicked('Hello')}>Send Msg</button>\n        {this.state.messages.map(msg => <p>message: {msg.msg}, user: {msg.user}</p>)} */}\n          </div>\n          :\n          <div style={{ padding: '200px 40px' }}>\n            <Search\n              placeholder=\"Enter UserName\"\n              enterButton=\"Login\"\n              size=\"large\"\n              onSearch={value => this.setState({ isLogged: true, userName: value })}\n            />\n          </div>\n        }\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}